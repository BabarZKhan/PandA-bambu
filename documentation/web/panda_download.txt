<strong>Latest stable release</strong>:

April 20th, 2016 - Release 0.9.4 - <a href="http://panda.dei.polimi.it/wp-content/uploads/panda-0.9.4.tar.gz">panda-0.9.4.tar.gz</a>.

New features introduced:
<ul>
<li>added support to GCC 5 (GCC 4.9 is still the preferred GCC compiler)</li>
<li>improved support to complex builtin data types</li>
<li>added an initial support to "Extended Asm - Assembler Instructions with C Expression Operands". In particular, the asm instruction could be used to inline VERILOG/VHDL code in a C source description (done by extending the multiple assembler dialects feature in asm templates: https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html)</li>
<li>timing for combinational accelerator is now correctly estimated by the backend synthesis scripts (accelerator that takes a single cycle to complete).</li>
<li>added option --serialize-memory-accesses to remove any memory access parallelization. It is mainly useful for debugging purposes.</li>
<li>added option --distram-threshold to explicitly control the DISTRIBUTED/ASYNCHRONOUS RAMs inferencing.</li>
<li>refactored of simulation/evaluation options</li>
<li>added support to STRATIX V and STRATIX IV</li>
<li>added support to Virtex4</li>
<li>added support to C files for cosimulation</li>
<li>added support to out of context synthesis on Altera boards</li>
<li>now Lattice ECP3 is fully supported. In particular, the byte enabling feature required by some of the memories instantiated by bambu is implemented by exploiting Lattice PMI (Parameterizable Module Inferencing) library.</li>
<li>improved and extended the integration of existing IPs written in Verilog/VHDL.</li>
<li>added an example showing how asm could be inlined in the C source code: simple_asm</li>
<li>added an example, named file_simulate, showing how open, read, write and close could be used to verify a complex design with datasets coming from a file</li>
<li>added an example showing how python could be used to verify the correctness of the HLS process: python-bindings</li>
<li>added MachSuite ("MachSuite: Benchmarks for Accelerator Design and Customized Architectures." - 2014 IEEE International Symposium on Workload Characterization.) to examples</li>
<li>added benchmarks of "A Survey and Evaluation of FPGA High-Level Synthesis Tools" -  IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems to examples</li>
<li>added two examples showing how external IPs could be integrated in the HLS flow: IP_integration and led_example</li>
<li>improved the VGA example for DE1 and ported to Nexys4 Xilinx prototyping board</li>
<li>added two examples showing how it is possible to run two arcade games such as pong and breakout on a Nexys 4 prototyping board without using any processor. The two examples smoothly connect a low level controller for the VGA port plus some GPIO controllers with plain C code describing the game behavior.</li>
<li>added a tutorial describing how to use bambu in designing a simple example: led_example</li>
<li>refactoring of scripts for technology libraries characterization</li>
<li>improved regression scripts: now panda regression consists of about 250K tests</li>
<li>assertions check now have to be explicitly disabled also in release</li>
<li>done port is now registered whenever it is possible</li>
<li>added support to the synthesis of function pointers and to the inter-procedural resource sharing of functions (reference paper is: Marco Minutoli, Vito Giovanni Castellana, Antonino Tumeo, Fabrizio Ferrandi: Inter-procedural resource sharing in High Level Synthesis through function proxies. FPL 2015: 1-8)</li>
<li>added support to speculative SDC code scheduling (controlled through option --speculative-sdc-scheduling | reference paper is: Code Transformations Based on Speculative SDC Scheduling. ICCAD 2015: 71-77)</li>
<li>added two new experimental setups (BAMBU-BALANCED-MP and BAMBU-BALANCED) oriented to trade-off between area and performances; BAMBU_BALANCED-MP is the new default experimental setup</li>
<li>added a discrepancy analysis to verify the correctness of the generated code (controlled through option --discrepancy | reference paper is: Pietro Fezzardi, Michele Castellana, Fabrizio Ferrandi: Trace-based automated logical debugging for high-level synthesis generated circuits. ICCD 2015: 251-258)</li>
<li>added common subexpression elimination step</li>
<li>reset can now be active high or active low (controlled through option --reset-level)</li>
<li>added support to file IO libc functions: open, read, write and close.</li>
<li>added support to assert function.</li>
<li>added support to libc functions: stpcpy stpncpy strcasecmp strcasestr strcat strchr 
                                   strchrnul strcmp strcpy strcspn strdup strlen strncasecmp 
                                   strncat strncmp strncpy strndup strnlen strpbrk strrchr 
                                   strsep strspn strstr strtok bzero bcopy mempcpy 
                                   memchr memrchr rawmemchr index rindex</li>
<li>improved double precision soft-float library</li>
<li>added support to single and double precision complex division operations: __divsc3 __divdc3</li>
<li>added preliminary support to irreducible loops</li>
<li>changed the PandA hardware description license from GPL to LGPL</li>
</ul>

<strong>Previous releases:</strong>

March 24th, 2015 - Release 0.9.3 - <a href="http://panda.dei.polimi.it/wp-content/uploads/panda-0.9.3.tar.gz">panda-0.9.3.tar.gz</a>.

PandA now requires GCC 4.6 or greater to be compiled.

New features introduced:
<ul>
<li>general improvement of performances of generated circuits</li>
<li>added full support to GCC 4.9 family which is now the default</li>
<li>improved retrieving of GCC alias analysis information</li>
<li>added first version of VHDL backend</li>
<li>added support to CycloneV</li>
<li>added support to Artix7</li>
<li>extended support to Virtex7 boards family</li>
<li>added option --top-rtldesign-name that controls which is the function to be synthesized by the RTL backed</li>
<li>it is now possible to write the testbench in C instead of using the xml file</li>
<li>added a first experimental backend to yosys (<a title="yosys link" href="http://www.clifford.at/yosys/">yosys link</a> )</li>
<li>added examples/crc_yosys which tests yosys backend and C based testbenches</li>
<li>improved Verilog testbench generation: it is now fully compliant with cycle based simulators (e.g., VERILATOR)</li>
<li>added option --backend-script-extensions to pass further constraints to the RTL synthesis (e.g., pin assignment)</li>
<li>added examples/VGA showing how to integrate existing HDL based IPs in a real FPGA design</li>
<li>added scripts and results for CHStone synthesis of Lattice based designs</li>
<li>improved support of complex numbers</li>
<li>single precision soft-float functions redesigned: now --soft-float is the default and --flopoco becomes optional</li>
<li>single precision floating point division implemented exploiting Goldshmidt algorithm</li>
<li>improved synthesis of libm functions</li>
<li>improved libm regression test</li>
<li>improved architectural timing model</li>
<li>improved graphviz representation of FSMs: timing information has been added</li>
<li>added option --post-rescheduling to further improve the resource usage</li>
<li>parameter registering is now performed and it can be controlled by using option --registered-inputs</li>
<li>added a full implementation of Bit Value analysis and coupled with Value Range analysis performed by GCC</li>
<li>added option --experimental-setup to control bambu defaults:</li>
<ul>
  <li>BAMBU-PERFORMANCE-MP - multi-port performance oriented setup</li>
  <li>BAMBU-PERFORMANCE    - single port performance oriented setup</li>
  <li>BAMBU-AREA-MP        - multi-port area oriented setup</li>
  <li>BAMBU-AREA           - single-port area oriented setup</li>
  <li>BAMBU                - no specific optimizations enabled</li>
</ul>
<li>improved code speculation</li>
<li>improved memory localization</li>
<li>added option --do-not-expose-globals making possible localization of globals, as it is similarly done by some commercial tools</li>
<li>added support of high latency memories and of distributed memories: zero, one and two delays memories are supported</li>
<li>added option --aligned-access to drive the memory allocation towards more simple block RAM models: it can be used under some restricted assumptions (e.g., no vectorization and no structs used)</li>
<li>ported the GCC algorithm which rewrites a division by a constant in adds and shifts</li>
<li>added option --hls-div that maps integer divisions and modulus on a C based implementation of the Newton-Raphson algorithm</li>
<li>improved technology libraries management:</li>
<ul>
  <li>technology libraries and contraints are now managed in a independent way</li>
  <li>multiple technology libraries can be provided to the tool at the same time</li>
</ul>
<li>improved and parallelized PandA test regression infrastructure</li>
<li>added support to Centos7, fedora 21, Ubuntu 14.04 and Ubuntu 14.10 distributions</li>
<li>complete refactoring of output messages</li>
</ul>

Problems fixed:
<ul>
<li>fixed problem related to Bison 2.7</li>
<li>fixed reinstallation of PandA in a different folder</li>
<li>fixed installation problems on systems where boost and gcc are not installed in default locations</li>
<li>removed some implicit conversions from generated verilog circuits</li>
</ul>


February 12th, 2014 - Release 0.9.2 - <a href="http://panda.dei.polimi.it/wp-content/uploads/panda-0.9.2.tar.gz">panda-0.9.2.tar.gz</a>.

New features introduced:
<ul>
<li>added an initial support to GCC 4.9.0,</li>
<li>stable support to GCC versions: v4.5, v4.6, v4.7 (default) and v4.8,</li>
<li>added an experimental support to Verilator simulator,</li>
<li>new dataflow dependency analysis for LOADs and STOREs; we now use GCC alias analysis to see if a LOAD and STORE pair or a STORE and STORE pair may conflict,</li>
<li>added a frontend step that optimizes PHI nodes,</li>
<li>added a frontend step that performs conditionally if conversions,</li>
<li>added a frontend step that performs simple code motions,</li>
<li>added a frontend step that converts if chains in a single multi-if control construct,</li>
<li>added a frontend step that simplifies short circuits based control constructs,</li>
<li>added a proxy-based approach to the LOADs/STOREs of statically resolved pointers,</li>
<li>improved EBR inference for Lattice based devices,</li>
<li>now, memory models are different for Lattice, Altera, Virtex5 and Virtex6-7 based devices,</li>
<li>updated FloPoCo to a more recent version,</li>
<li>now, register allocation maps storage values on registers without write enable when possible,</li>
<li>added support to CentOS/Scientific Linux distributions,</li>
<li>added support to ArchLinux distribution,</li>
<li>added support to Ubuntu 13.10 distribution,</li>
<li>now, testbenches accept a user defined error for float based computations; the error is specified in ULPs units; a Unit in the Last Place is the spacing between floating-point numbers,</li>
<li>improved architectural timing model,</li>
<li>added a very simple symbolic estimator of number of cycles taken by a function, it mainly covers function without loops and without unbounded operations,</li>
<li>general refactoring of automatic HLS testbench generation,</li>
<li>added support to libm function lceil and lceilf,</li>
<li>added skip-pipe-parameter option to bambu; it is is used to select a faster pipelined unit (xilinx devices have the default equal to 1 while lattice and altera devices have the default equal to 0),</li>
<li>improved memory allocation when byte-enabled write memories are not needed,</li>
<li>added support to variable lenght arrays,</li>
<li>added support to memalign builtin,</li>
<li>added EXT_PIPELINED_BRAM memory allocation policy, bambu with this option assumes that a block ram memory is allocated outside the core (LOAD with II=1 and latency=2 and STORE with latency=1),</li>
<li>added 2D matrix multiplication examples for integers and single precision floating point numbers,</li>
<li>added some synthesis scripts checking bambu quality of results w.r.t. 72 single precision libm functions (e.g., sqrtf, sinf, expf, tanhf, etc.),</li>
<li>added spider tool to automatically generate latex tables from bambu synthesis results,</li>
<li>moved all the dot generated files into directory HLS_output/dot/. Such files (scheduling, FSM, CFG, DFG, etc) are now generated when --print-dot option is passed,</li>
<li>VIVADO is now the default backend flow for Zynq based devices.</li>
</ul>

Problems fixed:
<ul>
<li>fixed all the Bison related compilation problems,</li>
<li>fixed some problems with testbench generation of 2D arrays,</li>
<li>fixed configuration scripts for manually installed Boost libraries; now, we need at least Boost 1.48.0,</li>
<li>fixed some problems with C pretty-printing of the internal IR,</li>
<li>fixed some ISE/Vivado synthesis problems when System Verilog based model are used,</li>
<li>fixed some problems with --soft-float based synthesis,</li>
<li>fixed RTL-backend configuration scripts looking for tools (e.g., ISE, Vivado, Quartus and Diamond) already installed,</li>
<li>fixed some problems with real-to-int and int-to-real conversions, added some explicit tests to the panda regressions.</li>
</ul>

September 17th, 2013 - Release 0.9.1 - <a href="http://panda.dei.polimi.it/wp-content/uploads/panda-0.9.1.tar.gz">panda-0.9.1.tar.gz</a>.

New features introduced:
<ul>
	<li>complete support of CHSTone benchmarks synthesis and verification (<a title="CHSTone link" href="http://www.ertl.jp/chstone/">link</a>),</li>
	<li>better support of multi-ported memories,</li>
	<li>local memory exploitation,</li>
	<li>read-only-memory exploitation,</li>
	<li>support of multi-bus for parallel memory accesses,</li>
	<li>support of unaligned memory accesses,</li>
	<li>better support of pipelined resources,</li>
	<li>improved module binding algorithms (e.g., slack-based module binding),</li>
	<li>support of resource constraints through user xml file,</li>
	<li>support of libc primitives: memcpy, memcmp, memset and memmove,</li>
	<li>better support of printf primitive for RTL debugging purposes,</li>
	<li>support of dynamic memory allocation,</li>
	<li>synthesis of libm builtin primitives such as sin, cos, acosh, etc,</li>
	<li>better integration with FloPoCo library (<a title="FloPoCo link" href="http://flopoco.gforge.inria.fr/">FloPoCo link</a>),</li>
	<li>soft-float based HW synthesis,</li>
	<li>support of Vivado Xilinx backend,</li>
	<li>support of Diamond Lattice backend,</li>
	<li>support of XSIM Xilinx simulator,</li>
	<li>synthesis and testbench generation of WISHBONE B4 Compliant Accelerators (see <a title="WB4 specs" href="http://cdn.opencores.org/downloads/wbspec_b4.pdf">WB4 specs</a> for details on the WISHBONE specification),</li>
	<li>synthesis of AXI4LITE Compliant Accelerators (experimental),</li>
	<li>inclusion of GCC regression tests to test HLS synthesis (tested HLS synthesis and RTL simulation),</li>
	<li>inclusion of libm regression tests to test HLS synthesis of libm (tested HLS synthesis and RTL simulation),</li>
	<li>support of multiple versions of GCC compiler: v4.5, v4.6 and v4.7.</li>
	<li>support of GCC vectorizing capability (experimental).</li>
</ul>

March 21st, 2012 - Release 0.9.0 - Build 10722 - <a href="http://panda.dei.polimi.it/wp-content/uploads/panda-0.9.0.tar.gz">panda-0.9.0.tar.gz</a>.

For any information or bug report, please write to panda-info@polimi.it or feel free to ask for help <a href="https://groups.google.com/forum/#!forum/panda-project-discussions-questions" target="_blank">on this google group</a>
