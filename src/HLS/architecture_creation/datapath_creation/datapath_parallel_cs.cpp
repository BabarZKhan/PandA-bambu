/*
 *
 *                   _/_/_/    _/_/   _/    _/ _/_/_/    _/_/
 *                  _/   _/ _/    _/ _/_/  _/ _/   _/ _/    _/
 *                 _/_/_/  _/_/_/_/ _/  _/_/ _/   _/ _/_/_/_/
 *                _/      _/    _/ _/    _/ _/   _/ _/    _/
 *               _/      _/    _/ _/    _/ _/_/_/  _/    _/
 *
 *             ***********************************************
 *                              PandA Project
 *                     URL: http://panda.dei.polimi.it
 *                       Politecnico di Milano - DEIB
 *                        System Architectures Group
 *             ***********************************************
 *              Copyright (c) 2004-2016 Politecnico di Milano
 *
 *   This file is part of the PandA framework.
 *
 *   The PandA framework is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
*/
/**
 * @file classic_datapath.cpp
 * @brief Datapath for context switch
 *
 * @author Nicola Saporetti <nicola.saporetti@gmail.com>
 *
*/

#include "datapath_parallel_cs.hpp"
#include "math.h"
#include "hls.hpp"
#include "structural_manager.hpp"
#include "structural_objects.hpp"
#include "hls_manager.hpp"
#include "BambuParameter.hpp"
#include "behavioral_helper.hpp"
#include "copyrights_strings.hpp"

datapath_parallel_cs::datapath_parallel_cs(const ParameterConstRef _parameters, const HLS_managerRef _HLSMgr, unsigned int _funId, const DesignFlowManagerConstRef _design_flow_manager, const HLSFlowStep_Type _hls_flow_step_type) :
   classic_datapath(_parameters, _HLSMgr, _funId, _design_flow_manager, _hls_flow_step_type)
{
    debug_level = parameters->get_class_debug_level(GET_CLASS(*this));
}

datapath_parallel_cs::~datapath_parallel_cs()
{

}

DesignFlowStep_Status datapath_parallel_cs::InternalExec()
{
   /// Test on previuos steps. They checks if schedule and connection binding have been performed. If they didn't,
   /// circuit cannot be created.
   THROW_ASSERT(HLS->Rfu, "Functional units not allocated");
   THROW_ASSERT(HLS->Rreg, "Register allocation not performed");
   THROW_ASSERT(HLS->Rconn, "Connection allocation not performed");
   /// Test on memory allocation
   THROW_ASSERT(HLSMgr->Rmem, "Memory allocation not performed");

   /// main circuit type
   const FunctionBehaviorConstRef FB = HLSMgr->CGetFunctionBehavior(funId);
   structural_type_descriptorRef module_type = structural_type_descriptorRef(new structural_type_descriptor("datapath_"+FB->CGetBehavioralHelper()->get_function_name()));

   /// top circuit creation
   HLS->datapath = structural_managerRef(new structural_manager(HLS->Param));

   HLS->datapath->set_top_info("Datapath_i", module_type);
   const structural_objectRef datapath_cir = HLS->datapath->get_circ();

   // Now the top circuit is created, just as an empty box. <circuit> is a reference to the structural object that
   // will contain all the circuit components

   datapath_cir->set_black_box(false);

   ///Set some descriptions and legal stuff
   GetPointer<module>(datapath_cir)->set_description("Datapath RTL descrition for " + FB->CGetBehavioralHelper()->get_function_name());
   GetPointer<module>(datapath_cir)->set_copyright(GENERATED_COPYRIGHT);
   GetPointer<module>(datapath_cir)->set_authors("Component automatically generated by bambu");
   GetPointer<module>(datapath_cir)->set_license(GENERATED_LICENSE);

   /// add clock and reset to circuit. It increments in_port number and update in_port_map
   INDENT_DBG_MEX(DEBUG_LEVEL_VERBOSE, debug_level, "---Adding clock and reset ports");
   structural_objectRef clock, reset;
   add_clock_reset(clock, reset);

   /// add all input ports
   INDENT_DBG_MEX(DEBUG_LEVEL_VERBOSE, debug_level, "---Adding ports for primary inputs and outputs");
   add_ports();

   //instantiate x kernel
   return DesignFlowStep_Status::SUCCESS;
}

void datapath_parallel_cs::add_ports()
{
    classic_datapath::add_ports();      //add standard port
    const structural_managerRef& SM = this->HLS->datapath;
    const structural_objectRef circuit = SM->get_circ();
    unsigned int num_slots=static_cast<unsigned int>(log2(HLS->Param->getOption<unsigned int>(OPT_context_switch)));
    structural_type_descriptorRef port_type = structural_type_descriptorRef(new structural_type_descriptor("bool", num_slots));
    structural_type_descriptorRef bool_type = structural_type_descriptorRef(new structural_type_descriptor("bool", 0));
    SM->add_port(STR(DONE_PORT_NAME)+"accelerator", port_o::OUT, circuit, port_type);
    SM->add_port(STR(DONE_REQUEST)+"accelerator", port_o::OUT, circuit, port_type);
    SM->add_port(STR(START_PORT_NAME)+"accelerator", port_o::IN, circuit, port_type);
    SM->add_port(STR(TASK_FINISHED), port_o::IN, circuit, bool_type);
    structural_type_descriptorRef request_type = structural_type_descriptorRef(new structural_type_descriptor("bool", 32));
    SM->add_port("request", port_o::IN, circuit, request_type);
}
